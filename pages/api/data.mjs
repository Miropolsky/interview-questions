export const questions = [
    {
        question: "Что происходит, когда мы ввели адрес сайта и нажали Enter?",
        answer: "Происходит поиск IP-адреса, загрузка HTML-документа, формирование DOM и рендеринг страницы, включая этапы Layout, Paint и Display.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое DOM?",
        answer: "Объектная модель документа, представляющая HTML-документ в виде дерева тегов для динамического изменения и взаимодействия с содержимым страницы.",
        categories: ["js", "all"]
    },
    {
        question: "Как эффективнее сделать анимацию: через transform/translate или через left?",
        options: [
            "Через transform/translate",
            "Через left"
        ],
        correctOption: 0,
        categories: ["htmlcss", "all"]
    },
    {
        question: "Что такое requestIdleCallback?",
        answer: "Функция, позволяющая выполнять колбэк во время простоя браузера, что полезно для загрузки второстепенных скриптов.",
        categories: ["js", "all"]
    },
    {
        question: "Что происходит на этапе тройного рукопожатия?",
        answer: "Происходит установление соединения между клиентом и сервером, проверка безопасности и синхронизация данных.",
        categories: ["general", "all"]
    },
    {
        question: "Какой этап идет после построения DOM и CSSOM?",
        options: [
            "Compositing",
            "Layout",
            "Paint"
        ],
        correctOption: 1,
        categories: ["general", "all"]
    },
    {
        question: "Что делает атрибут async в теге <script>?",
        options: [
            "Скрипт загружается параллельно и выполняется сразу после загрузки.",
            "Скрипт загружается параллельно и выполняется после построения DOM.",
            "Скрипт блокирует парсинг DOM до его выполнения."
        ],
        correctOption: 0,
        categories: ["js", "all"]
    },
    {
        question: "Что делает атрибут defer в теге <script>?",
        options: [
            "Скрипт загружается параллельно и выполняется сразу после загрузки.",
            "Скрипт загружается параллельно и выполняется после события DOMContentLoaded.",
            "Скрипт блокирует парсинг DOM до его выполнения."
        ],
        correctOption: 1,
        categories: ["js", "all"]
    },
    {
        question: "Что такое CSSOM?",
        answer: "CSSOM — это объектная модель стилей, которая формируется на основе загруженных CSS-стилей для дальнейшего их применения к элементам DOM.",
        categories: ["htmlcss", "all"]
    },
    {
        question: "Что такое CSS In JS?",
        answer: "Подход, позволяющий писать CSS внутри JavaScript и использовать стилизованные компоненты как обычные React-компоненты.",
        categories: ["css", "js", "all"]
    },
    {
        question: "Какие плюсы и минусы у CSS In JS?",
        options: [
            "Плюсы: автоматическое добавление вендорных префиксов. Минусы: сложность и замедление рендеринга из-за обработки JavaScript.",
            "Плюсы: стилизация вне JavaScript. Минусы: отсутствие вендорных префиксов.",
            "Плюсы: улучшенная производительность. Минусы: невозможность разделения на чанки."
        ],
        correctOption: 0,
        categories: ["css", "js", "all"]
    },
    {
        question: "Что такое CORS и какие проблемы он решает?",
        answer: "CORS — это механизм, который позволяет управлять доступом к ресурсам с других доменов для защиты от несанкционированных запросов.",
        categories: ["general", "all"]
    },
    {
        question: "Какие методы HTTP вы знаете?",
        options: [
            "GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD",
            "GET, POST, PATCH, UPDATE, REMOVE, OPTIONS",
            "GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD, TRACE"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Чем отличается метод PUT от PATCH?",
        answer: "PUT заменяет весь ресурс, а PATCH обновляет только его часть.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое SSR?",
        answer: "SSR (Server Side Rendering) — это процесс рендеринга страниц на сервере, после чего клиенту отдается готовый HTML.",
        categories: ["general", "all"]
    },
    {
        question: "В чем разница между HTTP и HTTPS?",
        answer: "HTTPS — это безопасная версия HTTP, которая использует шифрование данных и защищает от атак типа man-in-the-middle.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое TCP и CSP?",
        answer: "TCP — это протокол для надежной передачи данных, а CSP — политика безопасности контента для защиты от атак, таких как XSS.",
        categories: ["general", "all"]
    },
    {
        question: "Для чего нужен ETag в HTTP?",
        answer: "ETag используется для идентификации версий ресурсов, чтобы клиент мог проверять изменения и загружать только обновленные данные.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое Preflight-запрос?",
        answer: "Preflight-запрос — это предварительный запрос с методом OPTIONS, который используется для проверки прав доступа при сложных запросах.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое принцип единственной ответственности (SRP) в контексте React?",
        answer: "Компонент должен выполнять только одну задачу или функциональность, чтобы код был более читабельным и поддерживаемым.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Как работает принцип открытости/закрытости (OCP) в React?",
        answer: "Компоненты должны быть открыты для расширения, но закрыты для модификации. Новый функционал добавляется без изменения исходного кода.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Пример использования принципа подстановки Лисков (LSP) в React.",
        answer: "Компоненты, реализующие одинаковые интерфейсы, могут заменять друг друга без изменения кода.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Что означает принцип разделения интерфейсов (ISP) в React?",
        answer: "Компоненты должны получать только те пропсы, которые они действительно используют, чтобы избежать излишней зависимости.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Что означает принцип инверсии зависимостей (DIP) в контексте React?",
        answer: "Компоненты должны зависеть от абстракций, таких как пропсы или контекст, а не от конкретных реализаций.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Назовите ключевые принципы ООП.",
        options: [
            "Полиморфизм, инкапсуляция, наследование, абстракция",
            "Интерфейсы, полиморфизм, композиция, абстракция",
            "Наследование, функциональное программирование, инкапсуляция, декомпозиция"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Приведите пример полиморфизма в React.",
        answer: "Компонент может принимать разные пропсы и рендерить разные элементы в зависимости от них.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Что такое инкапсуляция в React?",
        answer: "Скрытие внутренней логики компонента, например, через локальное состояние, которое недоступно извне.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Как в React реализуется наследование?",
        answer: "Наследование встречается реже в React, но его можно использовать в классовых компонентах для наследования свойств и методов.",
        categories: ["general", "react", "all"]
    },
    {
        question: "Опишите процесс регистрации/авторизации с использованием JWT.",
        answer: "Запрос отправляется на сервер для валидации данных, после чего возвращается токен JWT, который сохраняется в cookie с флагом httpOnly.",
        categories: ["general", "js", "all"]
    },
    {
        question: "Что такое Interceptor в axios?",
        answer: "Interceptor — это функция, которая позволяет перехватывать запросы или ответы перед их обработкой.",
        categories: ["react", "js", "all"]
    },
    {
        question: "Где хранить токен для авторизации?",
        options: [
            "В куки с флагом httpOnly",
            "В localStorage",
            "В sessionStorage"
        ],
        correctOption: 0,
        categories: ["reeact", "js", "all"]
    },
    {
        question: "Для чего используется Nginx?",
        answer: "Nginx — это веб-сервер для размещения статики фронтенда, балансировки нагрузки и кэширования запросов.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое Docker?",
        answer: "Docker — это платформа для автоматизации развертывания приложений в контейнерах, что обеспечивает их работу на разных системах.",
        categories: ["general", "all"]
    },
    {
        question: "Какие существуют типы тестов?",
        options: [
            "Юнит-тесты, интеграционные тесты, E2E-тесты, визуальные тесты",
            "Юнит-тесты, нагрузочные тесты, модульные тесты",
            "UI-тесты, API-тесты, серверные тесты"
        ],
        correctOption: 0,
        categories: ["react", "js", "all"]
    },
    {
        question: "Приведите пример юнит-теста в React.",
        answer: "Тестирование отдельного компонента, например, правильного рендеринга кнопки в зависимости от пропсов.",
        categories: ["js", "react", "all"]
    },
    {
        question: "Как оценить сложность алгоритма?",
        answer: "Сложность алгоритма оценивается по времени и памяти: временная сложность показывает, как увеличивается время выполнения, пространственная — сколько памяти требуется.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое семантика в HTML и зачем она нужна?",
        answer: "Семантика в HTML — это использование HTML-тегов, которые явно описывают содержимое и структуру веб-страницы. Семантические теги помогают улучшить SEO, доступность и сделать код более понятным.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Какие основные семантические теги существуют в HTML?",
        answer: '<header><nav><section><article><aside><footer><main><figure><figcaption><time>',
        categories: ["htmlcss", "general"]
    },
    {
        question: "Чем полезны дата-атрибуты?",
        answer: "Дата-атрибуты позволяют сохранять дополнительную информацию в элементах и помогают избежать конфликтов с нативными атрибутами. Например, можно использовать их для тестов с помощью `data-test-id`.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Что такое псевдоклассы и псевдоэлементы?",
        options: [
            "Псевдоклассы изменяют стили в зависимости от состояния элемента (например, :hover, :focus).",
            "Псевдоэлементы позволяют стилизовать части элементов или добавлять контент (например, ::before, ::after).",
            "Псевдоклассы и псевдоэлементы идентичны и имеют одинаковый синтаксис."
        ],
        correctOption: 0,
        categories: ["htmlcss", "general"]
    },
    {
        question: "Какой вес у селекторов по порядку?",
        answer: "Инлайн стили (1000), ID (100), классы/псевдоклассы/атрибуты (10), тег/псевдоэлемент (1). `!important` (1000) перекрывает все.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Как выровнять блок по центру?",
        answer: 'С помощью Flexbox (display: flex; justify-content: center; align-items: center), С помощью Grid (display: grid; place-items: center), По горизонтали с помощью margin auto,       Через абсолютное позиционирование (position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%)),Текстовой блок с помощью text-align: cente',
        categories: ["htmlcss", "general"]
    },
    {
        question: "Как добавить отступ слева и справа?",
        answer: 'margin: 0 10px, Использовать border прозрачный с box-sizing: border-box, margin-left, margin-right,margin-inline: 10',
        categories: ["htmlcss", "general"]
    },
    {
        question: "Что важно учитывать при производительности CSS-анимаций?",
        answer: "Используйте свойства transform и opacity для анимаций, чтобы избежать перерисовки и layout-изменений. Используйте will-change для оптимизации, но избегайте его злоупотребления.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Чем отличается Flexbox от Grid?",
        options: [
            "Flexbox — одномерный контейнер, Grid — двумерная сетка.",
            "Flexbox и Grid — это одинаковые технологии.",
            "Grid используется только для флекс-контейнеров."
        ],
        correctOption: 0,
        categories: ["htmlcss", "general"]
    },
    {
        question: "Что такое CSS спрайты и их преимущества?",
        answer: "CSS спрайты — это объединение нескольких изображений в одно, что снижает нагрузку на сервер, так как отправляется один запрос. Преимущества включают снижение количества запросов к серверу и более быстрый рендеринг.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Чем отличаются rem и em?",
        answer: "em определяется относительно размера шрифта родителя и может накапливаться, а rem определяется относительно размера шрифта корневого элемента и не накапливается.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Огромная вложенность селекторов — это хорошо?",
        answer: "Нет, это усложняет код и может привести к проблемам с поддержкой и производительностью.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Что такое контейнерные запросы и как их использовать?",
        answer: "Контейнерные запросы позволяют применять стили в зависимости от ширины родительского контейнера. Это позволяет создавать адаптивные компоненты без добавления дополнительных классов.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Что такое CSS nesting и псевдокласс Has?",
        answer: "CSS nesting позволяет использовать вложенность стилей, как в SCSS. Псевдокласс Has позволяет применять стили к элементу на основе наличия определенных дочерних элементов или условий.",
        categories: ["htmlcss", "general"]
    },
    {
        question: "Что такое Webpack и для чего он используется?",
        answer: "Webpack — это инструмент для сборки кода, оптимизации и автоматизации задач разработки, таких как минификация и управление зависимостями. Он позволяет объединить ресурсы в бандлы, что упрощает и ускоряет загрузку приложения.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Entry Point в Webpack?",
        answer: "Entry Point — это файл или файлы, с которых Webpack начинает сборку, загружая все зависимости.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Output в Webpack?",
        answer: "Output определяет, куда Webpack сохранит собранные файлы, указывая директорию и имя файла для выходного бандла.",
        categories: ["technology", "all"]
    },
    {
        question: "Чем отличаются плагины от лоадеров в Webpack?",
        options: [
            "Лоадеры трансформируют файлы, плагины расширяют функционал Webpack",
            "Лоадеры минифицируют код, плагины работают только с HTML",
            "Плагины трансформируют файлы, лоадеры расширяют функционал Webpack"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Webpack Dev Server?",
        answer: "Webpack Dev Server запускает локальный сервер с поддержкой hot-reloading, обновляя страницу автоматически при изменении кода.",
        categories: ["technology", "all"]
    },
    {
        question: "Для чего используется разделение бандла (Bundle Splitting)?",
        answer: "Bundle Splitting позволяет разделить код на отдельные чанки для оптимизации загрузки и повышения производительности.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое минификация в контексте Webpack?",
        answer: "Минификация — это процесс удаления лишних пробелов и комментариев из кода для уменьшения размера файлов.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое углификация (обфускация) кода?",
        answer: "Углификация — это процесс переименования переменных и функций для уменьшения размера кода и его защиты.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Tree Shaking в Webpack?",
        answer: "Tree Shaking — это процесс оптимизации, который удаляет неиспользуемый код из финального бандла.",
        categories: ["technology", "all"]
    },
    {
        question: "Что делает плагин CssMinimizerPlugin?",
        answer: "CssMinimizerPlugin — это плагин для минификации CSS-файлов в Webpack.",
        categories: ["technology", "all"]
    },
    {
        question: "Какую роль выполняет Babel в Webpack?",
        answer: "Babel — это транспайлер, который преобразует современный JavaScript (ES6+) в код, совместимый со старыми браузерами.",
        categories: ["technology", "all"]
    },
    {
        question: "Что делает пакет dotenv?",
        answer: "Dotenv загружает переменные окружения из файла .env в process.env, позволяя хранить конфиденциальные данные.",
        categories: ["technology", "all"]
    },
    {
        question: "В чем разница между dotenv и DefinePlugin?",
        options: [
            "Dotenv работает на уровне Node.js, DefinePlugin заменяет переменные в клиентском коде",
            "DefinePlugin загружает переменные из .env файла",
            "Dotenv используется для минификации кода"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Для чего используется Webpack Module Federation Plugin?",
        answer: "Webpack Module Federation Plugin позволяет нескольким независимым фронтенд-приложениям взаимодействовать и делить модули между собой.",
        categories: ["technology", "all"]
    },
    {
        question: "Чем Vite отличается от Webpack?",
        options: [
            "Vite использует ES-модули и Esbuild для быстрой разработки, Webpack требует полной сборки",
            "Webpack быстрее за счет предварительной сборки",
            "Vite и Webpack одинаково быстры"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Что такое MobX-State-Tree (MST) и как он работает?",
        answer: "MobX-State-Tree — это библиотека для управления состоянием, где есть одно главное корневое хранилище (rootStore), содержащее другие хранилища. Подхранилища содержат экшены для изменения данных. MST подключается к React через контекст и использует подход с мутированием состояния.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Headless UI и для чего она используется?",
        answer: "Headless UI — это библиотека, предоставляющая готовые компоненты без стилей, которые можно использовать и стилизовать по своему усмотрению.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое StoryBook?",
        answer: "StoryBook — это витрина компонентов, которая используется для просмотра и документирования компонентов. Включает в себя написание историй (stories), таких как Modal.stories.tsx, для отображения компонентов.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое анализ Lighthouse и для чего он используется?",
        answer: "Анализ Lighthouse — это инструмент, который анализирует сайт на лучшие практики и показывает такие метрики, как производительность и web vitals. Вкладка performance отображает график построения страницы со скриншотами и эмуляцией для слабых устройств.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Infinity Scroll и как он реализуется?",
        answer: "Infinity Scroll — это механизм подгрузки данных, связанный с Intersection Observer. Когда элемент пересекает границу наблюдения (например, div внизу страницы), происходит подгрузка новых данных, таких как тикеты.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое переассайнмент в MobX-State-Tree?",
        answer: "Переассайнмент — это процесс обновления или переназначения значения свойства узла состояния в MST. Состояние в MST неизменяемо, и изменения вносятся через экшены (actions), которые изменяют состояние через мутации.",
        categories: ["technology", "all"]
    },
    {
        question: "Что делает ThemeProvider и как используется useTheme?",
        answer: "ThemeProvider — это контекст, обеспечивающий доступ к текущей теме. Кастомный хук useTheme используется для получения текущей темы из контекста, а также применяются CSS переменные для стилизации (var).",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Gitlab и для чего он используется?",
        answer: "Gitlab — это DevOps платформа для управления жизненным циклом разработки ПО. Она предоставляет хостинг Git-репозиториев, инструменты для CI/CD, управление проектами, трекинг задач, мониторинг, и безопасность.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое RTK Query и в чем его преимущества?",
        answer: "RTK Query — это инструмент в Redux Toolkit для управления асинхронными запросами и состоянием данных. Он упрощает работу с REST API, кеширование данных, повторные запросы и обработку ошибок, отделяя запросы на бэкенд от основного хранилища.",
        categories: ["technology", "all"]
    },
    {
        question: "Какие преимущества имеет Redux Toolkit?",
        answer: "Redux Toolkit упрощает работу с Redux благодаря интеграции с Immer.js, что позволяет избегать ручного написания большого количества экшенов и экшен-криэйторов.",
        categories: ["technology", "all"]
    },
    {
        question: "Как можно использовать webSocket с Redux Toolkit?",
        answer: "WebSocket можно использовать для обработки реального времени в Redux Toolkit, что позволяет получать данные напрямую с сервера без необходимости постоянного опроса.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое Video.js и для чего он используется?",
        answer: "Video.js — это популярная библиотека для создания медиаплееров, поддерживающая работу с различными форматами видео и аудио на веб-сайтах.",
        categories: ["technology", "all"]
    },
    {
        question: "Как реализовать экспорт данных в CSV?",
        answer: "Экспорт в CSV можно реализовать с использованием JavaScript-библиотек, таких как 'Papa Parse', или встроенными методами браузера для создания и загрузки CSV-файлов.",
        categories: ["technology", "all"]
    },
    {
        question: "Что такое FSD (Feature-Sliced Design) и для чего она используется?",
        answer: "FSD — это фронтенд архитектура, которая помогает структурировать проект, изолировать модули и снизить связанность кода. Она обеспечивает удобное разделение ответственности и способствует масштабируемости.",
        categories: ["general", "all"]
    },
    {
        question: "Как структурирован проект в FSD-архитектуре?",
        answer: "Проект в FSD состоит из уровней (layers), срезов (slices) и сегментов (segments). Каждый уровень имеет свои зоны ответственности, и между ними существует однонаправленный поток данных.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое слои в FSD и какие слои в нем выделяются?",
        answer: "Слои — это каталоги верхнего уровня в FSD, которые структурируют приложение. Выделяются семь слоёв: shared, entities, features, widgets, pages, process, app.",
        categories: ["general", "all"]
    },
    {
        question: "Каковы функции слоя shared в FSD?",
        answer: "Слой shared содержит ресурсы для повторного использования, не связанные с бизнес-логикой, такие как UI-инструменты, вспомогательные функции и логгеры.",
        categories: ["general", "all"]
    },
    {
        question: "Что содержится в слое entities в FSD?",
        answer: "Слой entities содержит бизнес-объекты, специфичные для проекта, такие как User, Payments, Products.",
        categories: ["general", "all"]
    },
    {
        question: "Какова цель слоя features в FSD?",
        answer: "Слой features содержит код, ценный с точки зрения бизнеса, например, функциональности, такие как ChangePassword, MakePayment, BuyProduct.",
        categories: ["general", "all"]
    },
    {
        question: "Что содержит слой widgets в FSD?",
        answer: "Слой widgets содержит компоненты, которые собираются из бизнес-объектов и функциональностей. Примеры: UserSettings, PaymentsList, ProductsList.",
        categories: ["general", "all"]
    },
    {
        question: "Для чего предназначен слой pages в FSD?",
        answer: "Слой pages содержит страницы приложения, которые состоят из объектов, фич и виджетов.",
        categories: ["general", "all"]
    },
    {
        question: "Что содержится в слое process в FSD?",
        answer: "Слой process отвечает за сложные внутристраничные сценарии, такие как механизмы аутентификации и капчи.",
        categories: ["general", "all"]
    },
    {
        question: "Что содержится в слое app в FSD?",
        answer: "Слой app содержит настройки приложения, стили и провайдеры, такие как withAuth.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое срезы (slices) в FSD и как они используются?",
        answer: "Срезы — это подкаталоги в каждом слое, зависящие от специфики проекта. Срезы одного слоя не могут напрямую использовать друг друга, и композиция должна описываться в слое над ними.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое сегменты (segments) в FSD?",
        answer: "Сегменты — это элементы, связанные с бизнес-ориентированностью и масштабируемостью архитектуры FSD. Они хорошо подходят для разработки сложных проектов большими командами.",
        categories: ["general", "all"]
    },
    {
        question: "Какие достоинства имеет FSD (Feature-Sliced Design)?",
        answer: "Основные достоинства FSD: ориентированность на потребности бизнеса, повторное использование логики, стабильность при рефакторинге, масштабируемость, стандартизация, поддержка большого сообщества и отличная документация.",
        categories: ["general", "all"]
    },
    {
        question: "Какие недостатки имеет FSD (Feature-Sliced Design)?",
        answer: "Основные недостатки FSD: требует глубокого понимания проекта, не подходит для MVP или краткосрочных проектов, требует воспитания архитектурной культуры и строгого кода-ревью.",
        categories: ["general", "all"]
    },
    {
        question: "Что обсуждается на ретро?",
        answer: "На ретро обсуждаются три ключевых вопроса: что было сделано хорошо, что можно улучшить, и какие действия нужно предпринять для улучшений.",
        categories: ["general", "all"]
    },
    {
        question: "Что происходит, если на ретро предложены улучшения?",
        answer: "Если предложены улучшения, заводится задача в JIRA, и она назначается на того, кто предложил изменения.",
        categories: ["general", "all"]
    },
    {
        question: "Как решается проблема с длительными ревью из-за код-стайла?",
        answer: "Для решения проблемы с длительными ревью из-за код-стайла предлагается внедрить Prettier, который автоматически решает вопросы форматирования.",
        categories: ["general", "all"]
    },
    {
        question: "Как сократить длительность дейликов?",
        answer: "Для сокращения длительности дейликов предлагается обсуждать вопросы после дейлика, а во время самого дейлика давать только краткий статус по задачам.",
        categories: ["general", "all"]
    },
    {
        question: "На чем фокусируется груминг (PBR)?",
        answer: "Груминг фокусируется на подготовке и уточнении задач для будущих спринтов, оценке задач, определении блокеров и приоритетов.",
        categories: ["general", "all"]
    },
    {
        question: "Какие задачи выполняются на этапе планирования?",
        answer: "На этапе планирования распределяются задачи между членами команды, определяется цель спринта и выбираются приоритетные задачи из бэклога для включения в спринт.",
        categories: ["general", "all"]
    },
    {
        question: "Какие вопросы обсуждаются на дейлике?",
        answer: "На дейлике каждый член команды отвечает на три вопроса: что сделано вчера, что планируется сделать сегодня, и какие препятствия мешают прогрессу.",
        categories: ["general", "all"]
    },
    {
        question: "Каковы обязанности Product Owner?",
        answer: "Product Owner отвечает за бизнес-часть: приоритезацию задач, управление бэклогом, коммуникацию с клиентами и определение требований к продукту.",
        categories: ["general", "all"]
    },
    {
        question: "Каковы обязанности аналитика?",
        answer: "Аналитик собирает требования, обсуждает технические детали, создает документацию и помогает разработчикам понять, что нужно делать.",
        categories: ["general", "all"]
    },
    {
        question: "Что делает тимлид?",
        answer: "Тимлид управляет командой, обеспечивает выполнение задач в срок, занимается код-ревью и поддерживает качество кода.",
        categories: ["general", "all"]
    },
    {
        question: "Что делает техлид?",
        answer: "Техлид принимает решения по технической части проекта, выбирает технологии, решает сложные задачи и отвечает за масштабируемость и производительность системы.",
        categories: ["general", "all"]
    },
    {
        question: "Как происходит процесс добавления задачи в JIRA?",
        answer: "Для добавления задачи в JIRA создается номер задачи, от мастер-ветки создается новая ветка, и разработка начинается с новой ветки.",
        categories: ["general", "all"]
    },
    {
        question: "Как происходит процесс релиза?",
        answer: "Релиз проводится каждые две недели. Сначала он катится на препрод в 17:00, а затем на продакшн в 22:00-23:00.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое Cherry-pick в процессе релиза?",
        answer: "Cherry-pick — это процесс переноса изменений из одной ветки в релизную ветку с помощью команды git cherry-pick, чтобы включить нужные изменения в релиз.",
        categories: ["general", "all"]
    },
    {
        question: "Как выполняется хотфикс после релиза?",
        answer: "Хотфикс выкатывается на следующий день после релиза или сразу. Создается ветка от мастер-ветки, открывается MR, и после тестирования фикс деплоится на прод.",
        categories: ["general", "all"]
    },
    {
        question: "Что такое FMP (First Meaningful Paint)?",
        answer: "Момент, когда отобразилась верстка, и пользователь может начать потреблять контент.",
        categories: ["performance", "all"]
    },
    {
        question: "Что такое TTI (Time to Interactive)?",
        answer: "Момент, когда сайт стал интерактивным после загрузки JavaScript.",
        categories: ["performance", "all"]
    },
    {
        question: "Что такое критический путь рендеринга (Critical Render Path)?",
        answer: "Набор действий и ресурсов, которые браузер должен загрузить и обработать, чтобы пользователь увидел первый результат, пригодный для работы.",
        categories: ["performance", "all"]
    },
    {
        question: "Какие шаги выполняет браузер для рендеринга страницы?",
        options: [
            "Сделать запрос и получить HTML-документ",
            "Построить DOM и CSSOM деревья",
            "Отправить запросы критических ресурсов",
            "Отрисовать страницу"
        ],
        correctOption: 0,
        categories: ["performance", "all"]
    },
    {
        question: "Что можно сделать, чтобы улучшить метрики FMP и TTI?",
        options: [
            "Разнести блокирующие ресурсы по страницам",
            "Использовать HTTP/2 для мультиплексирования запросов",
            "Грузить картинки лениво",
            "Использовать сжатие данных Brotli"
        ],
        correctOption: 0,
        categories: ["performance", "all"]
    },
    {
        question: "Какие особенности HTTP/2 помогают ускорить загрузку?",
        options: [
            "Мультиплексирование",
            "Сжатие заголовков",
            "Server Push",
            "Все перечисленное"
        ],
        correctOption: 3,
        categories: ["technology", "all"]
    },
    {
        question: "Что такое метрика LCP (Largest Contentful Paint)?",
        answer: "Метрика, которая измеряет время, за которое загружаются основные элементы содержимого во view port.",
        categories: ["performance", "all"]
    },
    {
        question: "Какие факторы могут повлиять на метрику LCP?",
        options: [
            "Медленный сервер",
            "Render blocking CSS и JS",
            "Медленная загрузка ресурсов",
            "Клиентская сторона рендеринга"
        ],
        correctOption: 0,
        categories: ["performance", "all"]
    },
    {
        question: "Что такое Event Loop в JavaScript?",
        answer: "Механизм, который управляет выполнением кода, событиями и задачами на различных очередях.",
        categories: ["js", "all"]
    },
    {
        question: "Какие задачи помещаются в очередь TaskQueue?",
        options: [
            "Отложенные задачи, такие как setTimeout",
            "Запросы через XmlHttpRequest",
            "События, такие как click или input",
            "Все перечисленное"
        ],
        correctOption: 3,
        categories: ["js", "all"]
    },
    {
        question: "Чем отличаются TaskQueue и MicroTaskQueue?",
        answer: "TaskQueue содержит отложенные задачи, события, а MicroTaskQueue используется для промисов и MutationObserver.",
        categories: ["js", "all"]
    },
    {
        question: "Как оптимизировать производительность анимаций в браузере?",
        options: [
            "Выносить анимации на CSS",
            "Использовать will-change для подготовки DOM к изменениям",
            "Использовать requestAnimationFrame для планирования изменений",
            "Все вышеперечисленное"
        ],
        correctOption: 3,
        categories: ["performance", "all"]
    },
    {
        question: "Что такое метрика CLS (Cumulative Layout Shift)?",
        answer: "Показатель, измеряющий стабильность макета страницы во время ее загрузки.",
        categories: ["performance", "all"]
    },
    {
        question: "Как уменьшить значение метрики CLS?",
        options: [
            "Резервировать место под динамический контент",
            "Указывать размеры для картинок и рекламных блоков",
            "Использовать фиксированные шрифты",
            "Все перечисленное"
        ],
        correctOption: 3,
        categories: ["performance", "all"]
    },
    {
        question: "Чем занимается компания ИБА?",
        options: [
            "Заказная разработка мобильных приложений и сайтов для корпоративного сектора",
            "Разработка игр для мобильных платформ",
            "Создание облачных хранилищ"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Какие задачи решает образовательная платформа, разработанная для корпоративного обучения?",
        options: [
            "Уменьшает время обучения сотрудников, позволяет отслеживать процесс и проводить тесты",
            "Оптимизирует расходы на обучение за счет автоматизации учебных материалов",
            "Создает индивидуальные планы развития сотрудников"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Какие элементы реализованы на фронтенде образовательной платформы?",
        options: [
            "Дашборды, графики, каталог курсов, личный кабинет, конструктор курса",
            "Только таблицы и графики",
            "Форумы и блоги"
        ],
        correctOption: 0,
        categories: ["frontend", "all"]
    },
    {
        question: "Сколько человек было в команде разработки проекта образовательной платформы?",
        options: [
            "4 фронтендера, тимлид, 2 бэкендера, 2 дизайнера, продуктолог, 2 тестировщика и аналитик",
            "6 фронтендеров, 3 дизайнера и 2 продуктолога",
            "1 фронтендер, 1 дизайнер, 1 аналитик"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Какую интересную задачу на проекте ИБА решал разработчик?",
        options: [
            "Разработка сложной MultiSteps формы для работы с любой формой в приложении",
            "Создание отчета о производительности компании",
            "Интеграция аналитических панелей"
        ],
        correctOption: 0,
        categories: ["frontend", "all"]
    },
    {
        question: "Что предложил разработчик для оптимизации селектов с большим количеством элементов?",
        options: [
            "Внедрение виртуализации для уменьшения количества DOM-нод",
            "Использование сторонних библиотек",
            "Увеличение производительности серверов"
        ],
        correctOption: 0,
        categories: ["frontend", "all"]
    },
    {
        question: "Чем занималась компания Exore?",
        options: [
            "Заказной разработкой программного обеспечения, преимущественно веб-приложений",
            "Созданием игр для мобильных платформ",
            "Разработкой операционных систем"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Что реализовано на фронтенде платформы поддержки в Exore?",
        options: [
            "Дашборды, личный кабинет, статистики ответов, управление тикетами",
            "Форумы и блоги",
            "Только графики"
        ],
        correctOption: 0,
        categories: ["frontend", "all"]
    },
    {
        question: "Какую задачу решал разработчик при работе с WebSocket?",
        options: [
            "Создание интерфейса для управления тикетами в реальном времени",
            "Разработка мессенджера",
            "Оптимизация загрузки данных"
        ],
        correctOption: 0,
        categories: ["frontend", "all"]
    },
    {
        question: "Какое решение использовалось для подгрузки данных при скролле?",
        options: [
            "Intersection Observer API",
            "Scroll Event Listener",
            "Lazy Loading"
        ],
        correctOption: 0,
        categories: ["frontend", "all"]
    },
    {
        question: "Как был реализован выбор цветовой схемы интерфейса?",
        options: [
            "С использованием ThemeProvider и кастомного хука useTheme на основе CSS переменных",
            "Использование внешних библиотек для изменения темы",
            "Жестко заданные стили в CSS"
        ],
        correctOption: 0,
        categories: ["frontend", "all"]
    },
    {
        question: "Сколько человек в вашей команде и какие роли в ней?",
        options: [
            "5 фронтендеров, 3 бэкендера, 3 тестировщика, 2 дизайнера, аналитик, менеджер проекта",
            "3 фронтендера, 2 бэкендера, 4 тестировщика, 1 дизайнер, продуктолог",
            "4 фронтендера, 2 бэкендера, 1 тестировщик, 3 дизайнера, аналитик"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Как часто у вас проходят спринты?",
        options: [
            "Каждые 2 недели",
            "Каждый месяц",
            "Каждые 3 недели"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Как начинается спринт?",
        options: [
            "С планирования задач во вторник",
            "С ретро-встречи",
            "С выполнения задач"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Как вы узнаете о новых задачах?",
        options: [
            "Тимлиду приходит бизнес и ставит цели на квартал, затем задачи разбиваются на более мелкие",
            "Менеджер проекта сам определяет задачи",
            "Аналитик сам генерирует задачи"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Как вы взаимодействуете с бэкендерами?",
        options: [
            "На груминге обсуждаем структуру данных и используем моковые данные",
            "Они сразу предоставляют готовые данные",
            "Мы общаемся только через менеджера проекта"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Какой процесс вы используете для релиза функционала?",
        options: [
            "Выкатываем на всех пользователей сразу",
            "Частями, в зависимости от сложности",
            "Только на тестовых пользователях"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Как вы понимаете, что новый функционал пользователю понравился?",
        options: [
            "Анализируем обратную связь и отзывы от поддержки",
            "Смотрим статистику использования",
            "Обсуждаем с менеджером проекта"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Какой процент важных и срочных багов по фронтенду?",
        options: [
            "3-5%",
            "10-15%",
            "1-2%"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Как вы работаете с техническим долгом?",
        options: [
            "Включаем в спринт, если критично, если нет, то планируем на потом",
            "Планируем только на ретро",
            "Рассматриваем только по необходимости"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Какие источники используете для получения новых знаний?",
        options: [
            "Слежу за сайтами технологий, читаю хабр, курсы повышения квалификации",
            "Читаю только книги по программированию",
            "Слушаю подкасты"
        ],
        correctOption: 0,
        categories: ["general", "all"]
    },
    {
        question: "Что делать, если срок выполнения задачи увеличивается?",
        answer: "Сообщить о проблеме как можно раньше, чтобы получить помощь и скорректировать план.",
        categories: ["behavioral", "all"]
    },
    {
        question: "Как вы взаимодействуете с другими командами?",
        answer: "Проходим фронтенд-встречи каждые 2 недели, обсуждаем новые фичи и технологии.",
        categories: ["general", "all"]
    },
    {
        question: "Как вы оцениваете объем задач на квартал?",
        answer: "Основываемся на предыдущем опыте, анализируем прошлые спринты и корректируем план в зависимости от команды.",
        categories: ["general", "all"]
    },
    {
        question: "Что вы делаете, если получаете другую важную задачу, когда времени недостаточно?",
        answer: "Спрашиваю, какая задача более приоритетная, и распределяю время соответственно.",
        categories: ["behavioral", "all"]
    },
    {
        question: "Какой подход к работе с техническим долгом у вас в команде?",
        answer: "Если технический долг критичен, включаем его в спринт, если нет — откладываем на потом.",
        categories: ["general", "all"]
    },
    {
        question: "Какой стек технологий используется в проекте EXORE?",
        options: [
            "React, Redux Toolkit, RTK Query, TypeScript, WebSocket, AntD, SCSS",
            "Angular, Redux, TypeScript, WebSocket, Bootstrap",
            "Vue, Vuex, Axios, CSS"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Какие компоненты включены в раздел 'Дашборд' (Dashboard) платформы EXORE?",
        options: [
            "Карточки (Cards), графики и диаграммы, фильтры и селекторы",
            "Список запросов, форма ответа, модальные окна",
            "Обратная связь, видеоплееры, чат поддержки"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Что реализовано в разделе 'Список запросов' (Ticket List)?",
        options: [
            "Таблица запросов, фильтры и поиск, боковая панель, кнопки действий",
            "Генератор отчетов, таблицы с данными, фильтры",
            "Форма редактирования, список агентов, роли и права"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Как реализован поиск тикетов на бекенде в проекте EXORE?",
        answer: "Поиск тикетов был реализован с дебаунсом (300 мс) и инфинити скроллом с использованием intersectionObserver.",
        categories: ["technology", "all"]
    },
    {
        question: "Какой компонент используется для визуализации данных в разделе 'Аналитика и отчёты' (Analytics & Reports)?",
        options: [
            "Диаграммы и графики",
            "Список запросов",
            "Форма конфигурации"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Что включает в себя раздел 'Управление агентами' (Agent Management)?",
        options: [
            "Список агентов, форма редактирования, фильтры и поиск, роли и права",
            "Форма настройки уведомлений, управление шаблонами сообщений",
            "Генератор отчетов, сохранение шаблонов"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Что включает в себя раздел 'Поддержка и обучение' (Support & Training)?",
        options: [
            "База знаний, видео-уроки, контактные формы, чат поддержки",
            "Форма настройки уведомлений, панель мониторинга качества обслуживания",
            "Каталог материалов, система комментариев"
        ],
        correctOption: 0,
        categories: ["technology", "all"]
    },
    {
        question: "Какой дизайн используется в платформе EXORE?",
        answer: "Современный, минималистичный дизайн с акцентом на удобство и четкость.",
        categories: ["all"]
    },
    {
        question: "Какой стек технологий использовался в проекте?",
        options: [
            "TypeScript, React, MobX-State-Tree, SCSS, React Router Dom, Headless UI, Gitlab, Axios, Webpack, ESlint, Prettier, React Hook Form",
            "JavaScript, Vue, Bootstrap, Git, Axios",
            "Python, Django, SASS, Redux, Webpack"
        ],
        correctOption: 0,
        categories: ["react", "all"]
    },
    {
        question: "Что такое многократная форма в проекте?",
        answer: "Многократная форма использовалась для создания и настройки нового курса и включала этапы: Основная информация, Настройка контента, Настройка доступа, Настройка тестов, Предварительный просмотр и подтверждение.",
        categories: ["react", "all"]
    },
    {
        question: "Как реализована анимация в проекте?",
        answer: "Анимация реализована через CSS трансформ и транзишин.",
        categories: ["htmlcss", "all"]
    },
    {
        question: "Какие кастомные хуки были использованы в проекте?",
        options: [
            "useLocalStorage, useDebounce, useModal, usePagination",
            "useFetch, useForm, useAuth",
            "useState, useEffect, useContext"
        ],
        correctOption: 0,
        categories: ["react", "all"]
    },
    {
        question: "Какие компоненты и логику для кабинета администратора вы разработали?",
        answer: "Включает мониторинг заявок, управление курсами, отчеты и аналитику, управление пользователями и обратной связью. Разработаны такие компоненты, как таблицы, формы, фильтры и редакторы.",
        categories: ["react", "all"]
    },
    {
        question: "Как был реализован мониторинг заявок?",
        answer: "Основной экран включает панель фильтров и таблицу заявок с возможностью взаимодействия. Статусы заявок индицируются цветами, и есть возможность детализированного просмотра.",
        categories: ["react", "all"]
    },
    {
        question: "Как вы разделяли код в проекте?",
        answer: "Использовалась ленивой загрузка, feature-based структура, кастомные хуки и переиспользуемые компоненты для разделения кода.",
        categories: ["react", "all"]
    },
    {
        question: "Какие тесты вы писали?",
        answer: "Unit тесты для вспомогательных компонентов, таких как button, input и т.д.",
        categories: ["all"]
    },
    {
        question: "Как вы ускорили холодную сборку фронта в CI?",
        answer: "Добавил опцию кеширования, выделил редко изменяемый код в отдельный бандл и удалил ненужные зависимости. Также мигрировал с 4 до 5 версии для улучшения производительности.",
        categories: ["technology", "all"]
    },
    {
        question: "Доволен ли ты всеми решениями по архитектуре у себя в команде?",
        options: [
            "Да, доволен. Чем именно доволен?",
            "Нет, не доволен. Чем именно не доволен?",
            "Не уверен, прорабатывал ли свои решения и предлагал ли их команде?"
        ],
        correctOption: 0,
        categories: ["behavioral", "all"]
    },
    {
        question: "Занимался ли девопс? CI настроить, с докером проработать, nginx конфиг посмотреть и поправить.",
        answer: [
            "Да, занимался. Чем именно?",
            "Нет, занимался ли кто-то из команды? Хотел бы заняться?",
            "Не уверен, кто занимался и есть ли желание заниматься?"
        ],
        correctOption: 0,
        categories: ["behavioral", "all"]
    },
    {
        question: "Какой вклад в команду по закрытию техдолга или улучшению developer experience ты принёс? Если такое было, расскажи как можно подробнее об этом.",
        answer: "Ответ зависит от конкретного опыта кандидата. Например, инициировал внедрение ESLint, TypeScript, улучшил архитектурные схемы и производительность.",
        categories: ["behavioral", "all"]
    },
    {
        question: "Проектировал ли крупные фичи/приложения/изменения в существующем коде? Если да, приведи пример.",
        answer: "Ответ зависит от конкретного опыта кандидата. Например, проектирование модуля шаблонизатора с интерактивными элементами, интеграция с AWS S3 и модуль поиска видео по тексту.",
        categories: ["behavioral", "all"]
    },
    {
        question: "Что такое семантический HTML и почему он важен?",
        options: [
            "HTML, который используется для стилизации страниц",
            "HTML, который описывает структуру и содержание страницы",
            "HTML, который добавляет интерактивные элементы на страницу"
        ],
        correctOption: 1,
        categories: ["htmlcss", "all"]
    },
    {
        question: "Какие основные преимущества Flexbox по сравнению с CSS Grid?",
        options: [
            "Flexbox лучше подходит для создания сложных сеток",
            "Flexbox проще в использовании для одноосных макетов",
            "Flexbox предоставляет больше возможностей для двухмерных макетов"
        ],
        correctOption: 1,
        categories: ["htmlcss", "all"]
    },
    {
        question: "Как можно оптимизировать производительность CSS-анимаций?",
        answer: "Для оптимизации производительности CSS-анимаций рекомендуется использовать transform и opacity вместо других свойств, а также минимизировать количество изменяемых элементов и использовать аппаратное ускорение.",
        categories: ["htmlcss", "all"]
    },
    {
        question: "Что такое промисы и как они работают?",
        options: [
            "Промисы - это способ обработки асинхронных операций в JavaScript",
            "Промисы - это объекты, которые содержат код для выполнения асинхронных задач",
            "Промисы - это синтаксический сахар для обработки колбэков"
        ],
        correctOption: 0,
        categories: ["js", "all"]
    },
    {
        question: "Объясните, как работает механизм делегирования событий в JavaScript.",
        answer: "Механизм делегирования событий позволяет назначать один обработчик события для родительского элемента, который будет обрабатывать события от дочерних элементов, используя свойство event.target для определения источника события.",
        categories: ["js", "all"]
    },
    {
        question: "В чем разница между компонентами класса и функциональными компонентами в React?",
        options: [
            "Компоненты класса имеют состояние и методы жизненного цикла, а функциональные компоненты не имеют состояния и методов жизненного цикла",
            "Функциональные компоненты имеют доступ к методам жизненного цикла, а компоненты класса не имеют состояния",
            "Компоненты класса и функциональные компоненты не имеют принципиальных различий"
        ],
        correctOption: 0,
        categories: ["react", "all"]
    },
    {
        question: "Что такое React Hooks и как они упрощают работу с состоянием и эффектами?",
        answer: "React Hooks - это функции, которые позволяют использовать состояние и другие возможности React без написания классов. Например, useState позволяет управлять состоянием, а useEffect - выполнять побочные эффекты.",
        categories: ["react", "all"]
    },
    {
        question: "Как работает Docker и как он помогает в разработке приложений?",
        answer: "Docker позволяет создавать контейнеры, которые содержат все необходимые зависимости для приложения, что упрощает развертывание и управление средой выполнения. Это делает приложения более портативными и изолированными.",
        categories: ["technology", "all"]
    },
    {
        question: "Объясните, что такое CI/CD и какие инструменты для этого вы использовали?",
        answer: "CI/CD - это практика непрерывной интеграции и непрерывного развертывания, которая помогает автоматизировать сборку, тестирование и развертывание приложений. Инструменты включают Jenkins, GitLab CI, CircleCI и другие.",
        categories: ["technology", "all"]
    },
    {
        question: "Как вы решаете конфликты в команде?",
        answer: "Я стараюсь выслушать все стороны, понять их точку зрения и предложить решение, которое будет учитывать интересы всех участников. При необходимости, я обращаюсь к менеджеру для разрешения конфликта.",
        categories: ["behavioral", "all"]
    },
    {
        question: "Расскажите о случае, когда вам пришлось работать над сложной задачей в команде. Как вы справились с трудностями?",
        answer: "Во время работы над проектом с несколькими зависимыми модулями, я активно коммуницировал с командой, чтобы определить проблемы и пути их решения. Мы организовали регулярные встречи для координации действий и успешного завершения проекта.",
        categories: ["behavioral", "all"]
    },
    {
        question: "Каковы основные отличия между CSS Grid и Flexbox, и когда лучше использовать каждую из технологий?",
        options: [
            "CSS Grid лучше подходит для создания двухмерных макетов, Flexbox - для одноосных макетов",
            "Flexbox лучше подходит для сложных сеток, CSS Grid - для простых макетов",
            "Обе технологии могут использоваться в любых случаях, их использование не имеет значительного отличия"
        ],
        correctOption: 0,
        categories: ["htmlcss", "all"]
    },
    {
        question: "Как реализовать поддержку различных тем в CSS (тёмная и светлая темы)?",
        answer: "Для реализации поддержки различных тем можно использовать CSS переменные и медиа-запросы. Определите переменные для различных цветов и применяйте их в стилях. Используйте медиа-запросы или переключатели для изменения значений переменных в зависимости от выбранной темы.",
        categories: ["htmlcss", "all"]
    },
    {
        question: "Как вы работаете с большими объемами данных в JavaScript, чтобы обеспечить хорошую производительность?",
        answer: "Для работы с большими объемами данных важно использовать эффективные алгоритмы и структуры данных. Использование Web Workers для параллельных вычислений и Lazy Loading для загрузки данных по мере необходимости также помогают поддерживать производительность.",
        categories: ["js", "all"]
    },
    {
        question: "Объясните концепцию асинхронных итераторов и как их можно использовать в JavaScript.",
        answer: "Асинхронные итераторы позволяют работать с потоками данных, которые поступают асинхронно. Они используются вместе с оператором `for-await-of` для итерации по асинхронным коллекциям, таким как данные из API или файлы, которые загружаются постепенно.",
        categories: ["js", "all"]
    },
    {
        question: "Как вы решаете проблему рендеринга компонентов в React при больших объемах данных?",
        answer: "Для оптимизации рендеринга компонентов при больших объемах данных можно использовать виртуализацию списков (например, библиотеку react-window), мемоизацию компонентов (React.memo, useMemo), и избегать ненужных рендеров через оптимизацию ключей в списках.",
        categories: ["react", "all"]
    },
    {
        question: "Как реализовать архитектуру управления состоянием в крупном приложении на React? Какие библиотеки вы используете и почему?",
        options: [
            "Использую Redux для централизованного управления состоянием и middleware для обработки побочных эффектов",
            "Использую Context API для глобального состояния и React Hooks для локального состояния",
            "Использую MobX для реактивного управления состоянием"
        ],
        correctOption: 0,
        categories: ["react", "all"]
    },
    {
        question: "Как вы реализуете автоматическое тестирование фронтенд-приложений? Какие инструменты и подходы используете?",
        answer: "Для автоматического тестирования фронтенд-приложений можно использовать инструменты, такие как Jest для юнит-тестов, React Testing Library для тестирования компонентов, и Cypress или Selenium для end-to-end тестов. Использование моков и стабы помогает изолировать тестируемые модули.",
        categories: ["technology", "all"]
    },
    {
        question: "Объясните, как вы подходите к разработке и внедрению системы CI/CD для фронтенд-приложений.",
        answer: "Для разработки и внедрения системы CI/CD важно настроить пайплайны для автоматической сборки, тестирования и развертывания приложений. Использование таких инструментов, как Jenkins, GitLab CI/CD, или GitHub Actions, позволяет автоматизировать процессы и повысить эффективность разработки.",
        categories: ["technology", "all"]
    },
    {
        question: "Расскажите о проекте, в котором вам пришлось принимать сложные технические решения. Как вы их принимали и какие результаты это принесло?",
        answer: "В одном из проектов мне пришлось выбрать между использованием готовых библиотек и разработкой собственного решения. Я провел анализ требований, оценил риски и преимущества каждого варианта, а также проконсультировался с командой. В результате мы выбрали оптимальное решение, которое соответствовало нашим требованиям и срокам.",
        categories: ["behavioral", "all"]
    },
    {
        question: "Как вы обеспечиваете эффективное взаимодействие и коммуникацию в команде разработчиков?",
        answer: "Для эффективного взаимодействия я организую регулярные встречи для обсуждения статуса задач, поддерживаю открытость и доступность для вопросов, и использую инструменты для совместной работы (например, Slack, Jira). Также важным аспектом является создание и поддержка культуры обратной связи.",
        categories: ["behavioral", "all"]
    }

];
